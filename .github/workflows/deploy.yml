name: Deploy React Vite App to S3

on:
  push:
    branches:
      - main  # Deploy whenever code is pushed to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Install dependencies and build Vite app
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      # Step 4: Deploy build folder to S3
      - name: Sync build output to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: dist   # Vite builds to 'dist' by default

      # Step 5 (Optional): Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-lambda:
    name: Deploy Lambda function
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm ci

      - name: Bundle Lambda entry (api/index.ts) with esbuild
        run: |
          mkdir -p .lambda_build
          # Bundle single router entry so all routes are included
          npx esbuild api/index.ts --bundle --platform=node --target=node20 --format=cjs --outfile=.lambda_build/index.js --log-level=warning

      - name: Copy static project JSON into lambda build
        run: |
          # Ensure public projects folder is copied so fs.readFileSync works at runtime
          mkdir -p .lambda_build/public/projects
          cp -R public/projects/. .lambda_build/public/projects/ || true

      - name: Prepare zip for Lambda
        run: |
          pushd .lambda_build
          zip -r ../function.zip . || true
          popd

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install awscli via pip
        run: |
          python -m pip install --upgrade pip awscli

      - name: Update Lambda function code
        env:
          LAMBDA_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION2 }}
        run: |
          if [ -z "$LAMBDA_NAME" ]; then echo "LAMBDA_FUNCTION_NAME secret is not set"; exit 1; fi
          aws lambda update-function-code --function-name "$LAMBDA_NAME" --zip-file fileb://function.zip --region "$AWS_REGION"